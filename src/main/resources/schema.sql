drop table if exists USERS cascade;
drop table if exists EXHAUSTED_DBS cascade;
drop table if exists COURSES cascade;
drop table if exists TESTS cascade;
drop table if exists QUESTIONS cascade;

drop sequence if exists USER_SEQUENCE ;
drop sequence if exists EXHAUSTED_DB_SEQUENCE ;
drop sequence if exists COURSE_SEQUENCE ;
drop sequence if exists TEST_SEQUENCE ;
drop sequence if exists QUESTION_SEQUENCE ;


CREATE SEQUENCE IF NOT EXISTS USER_SEQUENCE START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS EXHAUSTED_DB_SEQUENCE START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS COURSE_SEQUENCE START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS TEST_SEQUENCE START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS QUESTION_SEQUENCE START WITH 10 INCREMENT BY 1;


CREATE TABLE IF NOT EXISTS USERS
(
    ID SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR(200) NOT NULL,
    LAST_NAME VARCHAR(200) NOT NULL,
    LOGIN VARCHAR(200) NOT NULL,
    PASSWORD VARCHAR(500) NOT NULL,
    ROLE VARCHAR(200) NOT NULL
);

CREATE TABLE IF NOT EXISTS EXHAUSTED_DBS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(200),
    PATH VARCHAR(500),
    AUTHOR_ID INTEGER REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS COURSES
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(200),
    DESCRIPTION VARCHAR(500),
    AUTHOR_ID INTEGER REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS TESTS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(200),
    MAX_ATTEMPTS_CNT INTEGER,
    EXHAUSTED_DB_ID INTEGER REFERENCES EXHAUSTED_DBS(ID),
    COURSE_ID INTEGER REFERENCES COURSES(ID)
);

CREATE TABLE IF NOT EXISTS QUESTIONS
(
    ID SERIAL PRIMARY KEY,
    TEXT VARCHAR(500),
    RIGHT_ANSWER VARCHAR(500),
    TEST_ID INTEGER REFERENCES TESTS(ID)
);



